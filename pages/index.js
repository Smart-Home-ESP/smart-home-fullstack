import Head from 'next/head'
import styles from '../styles/Home.module.css'
import {PrismaClient} from '@prisma/client'
import WebSocket from 'ws';


Object.assign(global, { WebSocket: require('websocket').w3cwebsocket });

const StompJs = require('@stomp/stompjs');



export async function getStaticProps() {


    const prisma = new PrismaClient()
    const devices = await prisma.device.findMany()
    return {
        props: {devices: devices}
    }
}

export function IndexPage() {

}

export default function Home({devices}) {

   const client = new StompJs.Client({
        //brokerURL: 'ws://localhost:15674/ws', // RabbitMQ (should work)
        brokerURL: 'ws://192.168.1.214:9999/mywebsocket/websocket/', // Spring app (should fail)
        reconnectDelay: 5000,
        heartbeatIncoming: 4000,
        heartbeatOutgoing: 4000,
        logRawCommunication: true,
        debug: (x) => console.log(x),
    });

    client.onConnect = function (frame) {
        console.log('onConnect called');
    };

    client.activate();
    const handleClick = (e, id) => {
        client.publish({
            destination: "/device/changeDeviceStatus/" + id, body: JSON.stringify({
                task: "status change",
                status: "Off"
            })
        });
    };

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}>
                    Smart home <a href="https://nextjs.org">ESP</a>
                </h1>


                <div className={styles.grid}>

                    {devices.map(device => (
                        <a key={device.id} className={styles.card} onClick={(e) => handleClick(e, device.id)}>
                            <h2>{device.deviceName} &rarr;</h2>
                            <p>{device.status}</p>
                        </a>
                    ))}
                </div>
            </main>

        </div>
    )
}

